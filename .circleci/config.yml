version: 2.1
executors:
  default:
    working_directory: ~/repo
    docker:
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:8.0.17
        command: mysqld --default-authentication-plugin=mysql_native_password
      - image: mailhog/mailhog
    environment:
      - APP_DEBUG: true
      - APP_ENV: testing
      - APP_URL: http://localhost:8000
      - APP_KEY: base64:oXcJUWyOyM7lEV9lRjNmfLSP8d+wMyQ5HKLoyThB/9I=
      - DB_CONNECTION: circle_test
      - MYSQL_ALLOW_EMPTY_PASSWORD: true
      - MAIL_DRIVER: smtp
      - MAIL_HOST: localhost
      - MAIL_PORT: 1025
      - MAIL_USERNAME:
      - MAIL_PASSWORD:
      - MAIL_ENCRYPTION: ''
commands:
  add-hosts-for-test:
    steps:
      - run:
          name: Add hosts for test
          command: |
            echo 127.0.0.1 www.blog.sample | sudo tee -a /etc/hosts
            echo 127.0.0.1 admin.blog.sample | sudo tee -a /etc/hosts
  install-dockerize:
    steps:
      - run:
          name: Install dockerize
          command: >-
            wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &&
            sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz &&
            rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
  install-php-extensions:
    steps:
      - run:
          name: Install PHP Extensions
          command: sudo docker-php-ext-install pdo_mysql
  restore-cache-composer:
    steps:
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "composer.json" }}
            - v1-dependencies-
  composer-install:
    steps:
      - run:
          name: composer install
          command: composer install -n --prefer-dist
  save-cache-composer:
    steps:
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
  restore-cache-yarn:
    steps:
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package-lock.json" }}
            - node-v1-
  yarn-install:
    steps:
      - run:
          name: yarn install
          command: yarn install
  save-cache-yarn:
    steps:
      - save_cache:
          paths:
            - ./node_modules
          key: node-v1-{{ checksum "package-lock.json" }}
  wait-for-mysql:
    steps:
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
  migration-seeding:
    steps:
      - run:
          name: Migration & Seeding
          command: php artisan migrate --seed
  coding-rules-check:
    steps:
      - run:
          name: Coding rules check
          command: ./vendor/bin/phpcs --standard=phpcs.xml ./
  test-static-code-analysis:
    steps:
      - run:
          name: Static code analysis
          command: ./vendor/bin/phpstan analyse
  test-unittest:
    steps:
      - run:
          name: Unittest
          command: ./vendor/bin/phpunit
  test-e2etest:
    steps:
      - run:
          name: Install Chrome Driver
          command: php artisan dusk:chrome-driver 72
      - run:
          name: Start Chrome Driver
          command: ./vendor/laravel/dusk/bin/chromedriver-linux
          background: true
      - run:
          name: Start Laravel Server
          command: php artisan serve
          background: true
      - run:
          name: Run Dusk
          command: php artisan dusk
  install-aws-cli:
    steps:
      - run:
          name: Install AWS CLI
          command: |
            apk add --no-cache --update py-pip
            pip install awscli
  build-image:
    steps:
      - run:
          name: Build image
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
            docker build -t ${ECR_DOMAIN}:$CIRCLE_SHA1 -t ${ECR_DOMAIN}:latest .
  push-docker-image:
    steps:
      - run:
          name: Push docker image
          command: |
            docker push ${ECR_DOMAIN}:$CIRCLE_SHA1
            docker push ${ECR_DOMAIN}:latest
jobs:
  build:
    executor:
      name: default
    steps:
      - checkout
      - add-hosts-for-test
      - install-dockerize
      - install-php-extensions
      - restore-cache-composer
      - composer-install
      - save-cache-composer
      - restore-cache-yarn
      - yarn-install
      - save-cache-yarn
      - wait-for-mysql
      - migration-seeding
      - coding-rules-check
      - test-static-code-analysis
      - test-unittest
      - test-e2etest
  build_image:
    docker:
      - image: docker:18.09.0
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - install-aws-cli
      - build-image
      - push-docker-image
workflows:
  version: 2.1
  build-test-deploy:
    jobs:
      - build
      - build_image:
          requires:
            - build
          filters:
            branches:
              only: master